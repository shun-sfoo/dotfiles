# ~/.bashrc

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

export HISTCONTROL=ignoredups
export HISTCONTROL=erasedups
export HISTCONTROL=ignorespace
export HISTCONTROL=ignoreboth
export HISTCONTROL="erasedups:ignorespace"

#  Mimic Zsh run-help ability. from archwiki bash
run-help() { help "$READLINE_LINE" 2>/dev/null || man "$READLINE_LINE"; }
bind -m vi-insert -x '"\eh": run-help'
bind -m emacs -x '"\eh": run-help'

# fzf keybindings
# usage: like nvim \C-t  fzf-search
eval "$(fzf --bash)"

## rust tools
[ -e /usr/bin/starship ] && eval "$(starship init bash)"
[ -e /usr/bin/zoxide ] && eval "$(zoxide init bash)"
[ -e /usr/bin/mcfly ] && eval "$(mcfly init bash)"

# source aliases
if [ -f "$HOME/.bash_aliases" ]; then
  . "$HOME/.bash_aliases"
fi

## python
if [[ -d ~/.pyenv ]]; then
  export PATH="$HOME/.pyenv/bin:$PATH"
  eval "$(pyenv init --path)"
  eval "$(pyenv virtualenv-init -)"
fi

export GOPROXY=https://goproxy.cn

# Auto "cd" when entering just a path
shopt -s autocd

#[ -f "/home/neo/.ghcup/env" ] && . "/home/neo/.ghcup/env" # ghcup-env
[ -f "$HOME/.cargo/env" ] && . "$HOME/.cargo/env"

#export PATH="/opt/cuda/bin:$PATH"    # 这是默认的 cuda 安装位置
#export NVCC_CCBIN="/usr/bin/g++-13"  # Arch Linux 用户才需要这一行

pacadd() {
  if [ $# -lt 1 ]; then
    exit 0
  fi

  sudo pacman -S --needed "$@"
  pacman -Qqe >"$HOME/WorkSpaces/dotfiles/packages.list"
}

pacrm() {
  if [ $# -lt 1 ]; then
    exit 0
  fi

  sudo pacman -Rns "$@"
  pacman -Qqe >"$HOME/WorkSpaces/dotfiles/packages.list"
}
