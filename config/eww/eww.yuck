(deflisten workspaces :initial "[]" "bash ~/.config/eww/scripts/get-workspaces")
(deflisten current_workspace :initial "1" "bash ~/.config/eww/scripts/get-active-workspace")

(defpoll hour :interval "1s" "date +%H")
(defpoll min  :interval "1s" "date +%M")
(defpoll sec  :interval "1s" "date +%S")
(defpoll day_word :interval "10m" "date +%a | tr [:upper:] [:lower:]")
(defpoll day      :interval "10m" "date +%d")
(defpoll month    :interval "1h"  "date +%m")
(defpoll year     :interval "1h"  "date +%y")

(defwidget time []
  (box :orientation "v"
       :class "time"
    hour min sec))

(defwidget date []
  (box :orientation "v"
       :halign "center"
    day_word day month year))

(defwidget metric [icon ?font-size]
  (box :class "metric"
       :orientation "v"
    (label :class "metric-icon"
           :style {font-size != "" ? "font-size: ${font-size}rem;" : ""}
           :text icon)
    (children)))

(defwidget bar []
  (centerbox :orientation "v"
    (box :class "segment-top"
      :valign "start"
      (top))
    (box :valign "center"
      :class "middle"
      (middle))
    (box :valign "end"
      :class "segment-bottom"
      (bottom))))

(defwidget workspaces []
  (box :orientation "v" :class "workspaces"
    (label :text "${workspaces}${current_workspace}" :visible false)
    (for wsp in {workspaces}
      (button :class "${wsp.id == current_workspace ? "active" : "inactive"} ${wsp.windows > 0 ? "occupied" : "empty"}"
        :onclick "hyprctl dispatch workspace ${wsp.id}"
        {wsp.id}))))

(defwidget top []
  (box :orientation "v"
    (workspaces)
    (systray :orientation "v" :icon-size 20 :spacing 10)))


(defwidget middle [] (time))

(defwidget bottom []
  (box :orientation "v"
    :valign "end"
    :space-evenly true
    :spacing "5"
    ; (volume)
    (metric :icon " "
      :font-size 1.0
      "${round((1 - (EWW_DISK["/home"].free / EWW_DISK["/home"].total)) * 100, 0)}%")
    (metric :icon " " :font-size 1.0 "${round(EWW_RAM.used_mem_perc, 0)}%")
    (metric :icon " " :font-size 1.0 "${round(EWW_CPU.avg, 0)}%")
    (box :class "metric" (date))))


(defwindow bar
  :monitor 0
  :stacking "fg"
  :geometry (geometry :x 0 :y 0 :width "2%" :height "100" :anchor "center left")
  :exclusive true
  (bar))
